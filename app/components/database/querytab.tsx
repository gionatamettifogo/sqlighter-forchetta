//
// querytab.tsx - panel used to edit and run database queries, show results
//

import React from "react"
import { useState } from "react"
import { parseISO, format } from "date-fns"

import { Allotment } from "allotment"
import "allotment/dist/style.css"

import Box from "@mui/material/Box"
import Button from "@mui/material/Button"

import { Command, CommandEvent } from "../../lib/commands"
import { DataConnection } from "../../lib/sqltr/connections"
import { generateId } from "../../lib/items/items"
import { Panel, PanelProps } from "../navigation/panel"
import { Tabs } from "../navigation/tabs"

import { ConnectionsMenu } from "./connectionsmenu"
import { SqlEditor } from "../editor/sqleditor"
import { QueryResultsPanel, QueryExecResult } from "./queryresultspanel"

const delay = (ms) => new Promise((res) => setTimeout(res, ms))

export interface QueryTabProps {
  /** Currently selected connection */
  connection?: DataConnection

  /** All available data connections */
  connections?: DataConnection[]

  /** Initial value for SQL query string shown in editor */
  sql: string

  /** Results are shown below query or to the side (default, bottom) */
  variant?: "bottom" | "right"

  /** Callback used to dispatch application level commands generated by the panel */
  onCommand?: CommandEvent
}

export function QueryTab(props: QueryTabProps) {
  const [results, setResults] = useState<any[]>([])

  const [sql, setSql] = useState<string>(props.sql)

  //
  // handlers
  //

  async function handleRunQuery(e: React.SyntheticEvent) {
    console.debug(`handleRunQuery - ${sql}`)

    const startedOn = new Date()
    const runningResult: QueryExecResult = {
      id: generateId("tab_"),
      title: startedOn.toLocaleTimeString(),
      startedOn,
      status: "running",

      columns: null,
      values: null,
    }
    setResults([runningResult, ...results])

    try {
      const queryResults = await props.connection.getResults(sql)
      console.debug(`risultato query[0]`,queryResults[0])
      
      await delay(500)

      runningResult.status = "completed"
      runningResult.completedOn = new Date()
      runningResult.columns = queryResults[0].columns
      runningResult.values = queryResults[0].values


      if (queryResults.length > 1) {
        runningResult.title += " (1)"
        for (let i = 1; i < queryResults.length; i++) {
          const moreResults = {
            id: generateId("tab_"),
            title: `${startedOn.toLocaleTimeString()} (${i + 1})`,
            startedOn,
            completedOn: new Date(),
            status: "completed",
            columns: queryResults[i].columns,
            values: queryResults[i].values,
          }
          results.splice(i, 0, moreResults)
        }
      }

    } catch (exception) {
      console.error(`handleRunQuery - ${exception}`, exception)
      runningResult.status = "error"
      runningResult.completedOn = new Date()
      runningResult.error = exception.toString()
      // throw exception
    }

    results.splice(0, 1, Object.assign({}, runningResult))
    setResults([...results])
  }

  async function handleCommand(e: React.SyntheticEvent, command: Command) {
    console.debug(`QueryPanel.handleCommand - ${command.command}`, command)
    switch (command.command) {
      case "editor.changeValue":
        setSql(command.args.value)
        break
    }
  }

  //
  // render
  //

  const HEADER_HEIGHT = 150
  const MAIN_HEIGHT = 200
  const variant = "vertical"

  function renderHeader() {
    return (
      <Box className="PanelWithResults-header" sx={{ height: HEADER_HEIGHT }}>
        <Box>Title</Box>
        <Box>Description</Box>
        <ConnectionsMenu connection={props.connection} connections={props.connections} />
        <Button onClick={handleRunQuery}>Run Query2</Button>
      </Box>
    )
  }

  function renderEditor() {
    return <SqlEditor value={props.sql} onCommand={handleCommand} />
  }

  function renderResults() {
    const tabs = results &&
    results.map((result, index) => {
      return {
        id: result.id,
        title: result.title,
        children: <QueryResultsPanel key={result.id} result={result} />
      }
    })

    return <Tabs tabs={tabs} />
  }

  return (
    <Box className="QueryPanel-root" sx={{ width: 1, height: 1, maxHeight: 1 }}>
      <Allotment vertical={props.variant !== "right"}>
        <Allotment.Pane minSize={150} maxSize={150}>
          {renderHeader()}
        </Allotment.Pane>
        <Allotment.Pane minSize={100}>{renderEditor()}</Allotment.Pane>
        <Allotment.Pane minSize={100}>
          <Box sx={{ height: 1, maxHeight: 1 }}>{renderResults()}</Box>
        </Allotment.Pane>
      </Allotment>
    </Box>
  )
}

/** Create a query tab in response to a sqlighter.viewQuery command */
export function createQueryTab(command: Command, connection?: DataConnection, connections?: DataConnection[]) {
  const title = `Untitled, ${format(new Date(), "LLLL d, yyyy")}`

  const tab: PanelProps = {
    id: generateId("tab_"),
    title,
    description: title + "'s description",
    icon: "query",
    children: <QueryTab connection={connection} connections={connections} sql={command?.args?.sql} />,
  }
  console.debug(`createTab - tabId: ${tab.id}`, command, tab)
  return tab
}
