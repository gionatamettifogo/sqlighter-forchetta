//
// querypanel.tsx - panel used to edit and run database queries, show results
//

import React from "react"
import { useState } from "react"
import { parseISO, format } from "date-fns"

import Box from "@mui/material/Box"
import Button from "@mui/material/Button"
import { DataGrid } from "@mui/x-data-grid"

import { Command, CommandEvent } from "../../lib/commands"
import { DataConnection } from "../../lib/sqltr/connections"
import { generateId } from "../../lib/items/items"
import { Panel, PanelProps } from "../navigation/panel"

import { ConnectionsMenu } from "./connectionsmenu"
import { SqlEditor } from "../editor/sqleditor"

export interface QueryPanelProps {
  connection?: DataConnection

  connections?: DataConnection[]

  sql: string

  /** Callback used to dispatch application level commands generated by the panel */
  onCommand?: CommandEvent
}

export function QueryPanel(props: QueryPanelProps) {
  const [results, setResults] = useState<any[]>([])

  const [sql, setSql] = useState<string>(props.sql)

  //
  // handlers
  //

  async function handleRunQuery(e: React.SyntheticEvent) {
    console.debug(`handleRunQuery - ${sql}`)
    const queryResults = await props.connection.getResults(sql)
    setResults([...queryResults, ...results])
  }

  async function handleCommand(e: React.SyntheticEvent, command: Command) {
    console.debug(`QueryPanel.handleCommand - ${command.command}`, command)
    switch (command.command) {
      case "editor.changeValue":
        setSql(command.args.value)
        break
    }
  }

  //
  // render
  //

  return (
    <>
      Query panel
      <ConnectionsMenu connection={props.connection} connections={props.connections} />
      <Box sx={{ width: "100%", height: 200, overflow: "hidden" }}>
        <SqlEditor value={props.sql} onCommand={handleCommand} />
      </Box>
      <Button onClick={handleRunQuery}>Run Query</Button>
      <Box>
        {!results && <>No results</>}
        {results && results.map(({ columns, values }, i) => <ResultsTable key={i} columns={columns} values={values} />)}
      </Box>
    </>
  )
}

/** Create a query tab in response to a sqlighter.viewQuery command */
export function createQueryTab(command: Command, connection?: DataConnection, connections?: DataConnection[]) {
  const title = `Untitled, ${format(new Date(), "LLLL d, yyyy")}`

  const tab = {
    id: generateId("tab_"),
    title,
    description: "description of tab 0",
    icon: "query",
    children: <QueryPanel connection={connection} connections={connections} sql={command?.args?.sql} />,
  }
  console.debug(`createTab - tabId: ${tab.id}`, command, tab)
  return tab
}

/**
 * Renders a single value of the array returned by db.exec(...) as a table
 * @param {import("sql.js").QueryExecResult} props
 */
function ResultsTable({ columns, values }) {
  const columns3 = columns.map((column) => {
    return { field: column, headerName: column, minWidth: 150, editable: true }
  })

  const rows3 = values.map((value, rowIndex) => {
    const valueDict = {}
    columns3.forEach((element, columnIndex) => {
      valueDict["id"] = rowIndex
      valueDict[element.field] = value[columnIndex]
    })
    return valueDict
  })

  console.log("mappato", columns3)
  console.log("values4", rows3)

  return (
    <>
      <div style={{ display: "flex", height: "100%", minHeight: 400 }}>
        <div style={{ flexGrow: 1 }}>
          <DataGrid
            rows={rows3}
            columns={columns3}
            pageSize={50}
            rowsPerPageOptions={[10, 50, 100]}
            checkboxSelection
            disableSelectionOnClick
          />
        </div>
      </div>
    </>
  )
}
